apply plugin: 'java'
apply plugin: 'distribution'

compileJava {
    //enable compilation in a separate daemon process
    options.fork = true

    //enable incremental compilation
    options.incremental = true
}

sourceSets {
    main {
        java {
            sources {
                srcDir 'src'
            }
            resources {
                srcDir 'res'
            }
        }
    }
}

dependencies {
    compile fileTree(dir: IDEA_LIBS, include: ['*.jar'])
    compile fileTree(dir: 'lib', include: ['*.jar'])
}

version = PLUGIN_VERSION
// create r2m-plugin-android.jar
jar {
    //
    archiveName = "${PLUGIN_NAME}.jar"
    destinationDir = file("build/${PLUGIN_NAME}/lib/")

    // include plugin.xml
    from('.') {
        include ('META-INF/plugin.xml')
    }
}


configurations {
    antTask
}

//dependencies {
//    antTask name: 'javac2', version: '12.1.0'
//    antTask name: 'forms_rt', version: '12.1.0'
//    antTask name: 'asm4-all', version: '12.1.0-idea'
//    antTask group: 'org.jdom', name: 'jdom', version: '1.1'
//}

task compileJava(overwrite: true, dependsOn: configurations.compile.getTaskDependencyFromProjectDependency(true, 'jar')) {
    doLast {
        project.sourceSets.main.output.classesDir.mkdirs()
        ant.taskdef name: 'javac2', classname: 'com.intellij.ant.Javac2', classpath: configurations.antTask.asPath
        ant.javac2 srcdir: project.sourceSets.main.java.srcDirs.join(':'),
                classpath: project.sourceSets.main.compileClasspath.asPath,
                destdir: project.sourceSets.main.output.classesDir,
                source: sourceCompatibility,
                target: targetCompatibility,
                includeAntRuntime: false
    }
}

task copyFormsLib(type: Copy) {
    from(new File(IDEA_LIBS, "forms_rt.jar"))
    into ("build/${PLUGIN_NAME}/lib")
}

task copyLibs(type: Copy, dependsOn: copyFormsLib) {
    from('.') {
        include ('lib/*.jar')
    }
    into ("build/${PLUGIN_NAME}")


}


task pluginZip(type: Zip, dependsOn: copyLibs) {
    archiveName = "${PLUGIN_NAME}-${PLUGIN_VERSION}.zip"
    from ("build")
    include("${PLUGIN_NAME}/lib/*.jar")

    doLast {
        println("Plugin file created under build/distributions/$archiveName")
    }

}

